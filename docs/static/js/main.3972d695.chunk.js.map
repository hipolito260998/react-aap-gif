{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GetGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","Categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAG3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACE,sBAAMC,SAba,SAACC,GAChBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OACpCN,EAAc,MAQtB,SACE,uBAAOO,KAAK,OACZC,MAAOT,EACPU,SApBsB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,UAAUZ,QAVhB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAI/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCLHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECHwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAfAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAELH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIpB,CAACpB,IAIIqB,EDpBqBK,CAAa1B,GAA7ByB,EAAZ,EAAOlB,KAAUa,EAAjB,EAAiBA,QAGjB,OACI,qCACA,6BAAKpB,IAEJoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEZ,qBAAKA,UAAU,YAAf,SAEYS,EAAKhB,KAAI,SAACC,GAAD,OACL,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEhBpBgB,EAAe,WAG1B,MAAoCzC,mBAClC,CAAC,iBADH,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMA,OACE,eAAC,WAAD,WACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEM2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCjBzB6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.3972d695.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({setCategories}) => {\n\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategories(cats=>[inputValue, ...cats]);\n            setInputValue('');\n\n        }\n\n        \n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" \n      value={inputValue} \n      onChange={handleInputChange} \n\n      />\n    </form>\n  );\n\n};\n\nAddCategory.propTypes={\n   setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const GetGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI (category)}&limit=10&api_key=FkPCRFLJ5kj4lDs8Zu5KyeFVeSFrq50R`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized.url\n        }\n\n    })\n\n    return gifs;\n\n    \n\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n\n    \n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n\n    const {data:imgs,loading} = useFetchGifs(category);\n\n\n    return (\n        <> \n        <h3>{category}</h3>\n\n        {loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\n\n        <div className=\"card-grid\">\n                {\n                    imgs.map((img) =>(\n                        <GifGridItem \n                        key={img.id}\n                        {...img }\n\n                        />\n                    ))\n                }\n            \n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport {GetGifs} from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setState] = useState({\n        data:[],\n        loading: true\n        \n    });\n\n    useEffect(() => {\n\n        GetGifs(category)\n            .then(imgs =>{\n                \n             setState({\n                 data: imgs,\n                 loading: false\n              }) \n            })\n\n    },[category])\n\n   \n\n    return state;\n}\n","import React, { Fragment, useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  \n\n  const [Categories, setCategories] = useState(\n    [\"boku no hero\"]\n  );\n\n\n\n  return (\n    <Fragment>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      \n\n      <ol>\n        {\n            Categories.map(category => (\n                <GifGrid \n                    key={category}\n                    category={category}\n                />\n            ))\n        }\n      </ol>\n    </Fragment>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n\n  document.getElementById('root')\n\n);\n\n\n\n"],"sourceRoot":""}